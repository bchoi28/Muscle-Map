/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("document.addEventListener('DOMContentLoaded', () => {\n  const humanBody = document.querySelector('.human-body');\n  humanBody.addEventListener('click', event => {\n    if (event.target.matches('.muscle-block')) {\n      switch (event.target.id) {\n        case 'chest-left':\n          handleChestLeftClick();\n          break;\n        case 'shoulder-left':\n          handleShoulderLeftClick();\n          break;\n        // add more cases for other muscle blocks\n      }\n    }\n  });\n});\n\nfunction handleChestLeftClick() {\n  const options = {\n    method: 'GET',\n    headers: {\n      'X-RapidAPI-Key': '77bc8cf14dmsh3bcf905be22b505p150b37jsndd4d64ef3661',\n      'X-RapidAPI-Host': 'exerciseapi3.p.rapidapi.com'\n    }\n  };\n  fetch('https://exerciseapi3.p.rapidapi.com/search/?primaryMuscle=pectoralis%20major', options).then(response => response.json()).then(data => {\n    const randomIndex = Math.floor(Math.random() * data.length);\n    const randomExercise = data[randomIndex];\n    const exerciseInfo = d3.select(\"#exercise-info\");\n    const primaryMuscles = randomExercise[\"Primary Muscles\"].toString();\n    const formattedPrimaryMuscles = primaryMuscles.split(',').map(muscle => {\n      const words = muscle.split(\" \");\n      return words.map(w => w[0].toUpperCase() + w.slice(1)).join(\" \");\n    }).join(\", \");\n    const secondaryMuscles = randomExercise[\"SecondaryMuscles\"].toString();\n    const formattedSecondaryMuscles = secondaryMuscles.split(',').map(muscle => {\n      const words = muscle.split(\" \");\n      return words.map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(\" \");\n    }).join(\", \");\n    exerciseInfo.append(\"p\").attr(\"class\", \"exercise-name\").text(`Exercise Name: ${randomExercise.Name}`);\n    exerciseInfo.append(\"p\").attr(\"class\", \"primary-muscles\").text(`Primary Muscles: ${formattedPrimaryMuscles}`);\n    exerciseInfo.append(\"p\").attr(\"class\", \"secondary-muscles-title\").text(`Secondary Muscles: ${formattedSecondaryMuscles}`);\n    console.log(exerciseInfo);\n  }).catch(err => console.error(err));\n}\nfunction handleShoulderLeftClick() {\n  const options = {\n    method: 'GET',\n    headers: {\n      'X-RapidAPI-Key': '77bc8cf14dmsh3bcf905be22b505p150b37jsndd4d64ef3661',\n      'X-RapidAPI-Host': 'exerciseapi3.p.rapidapi.com'\n    }\n  };\n  fetch('https://exerciseapi3.p.rapidapi.com/search/?primaryMuscle=deltoid', options).then(response => response.json()).then(data => {\n    const randomIndex = Math.floor(Math.random() * data.length);\n    const randomExercise = data[randomIndex];\n    console.log(randomExercise.Name);\n    console.log(randomExercise[\"Primary Muscles\"]);\n    console.log(randomExercise.SecondaryMuscles);\n  }).catch(err => console.error(err));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNjbGVfbWFwLy4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;